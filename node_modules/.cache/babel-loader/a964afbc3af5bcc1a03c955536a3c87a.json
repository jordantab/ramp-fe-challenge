{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\"; // export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n//   const fetchAll = useCallback(async () => {\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null || previousResponse === null) {\n//         return response\n//       }\n//       return { data: response.data, nextPage: response.nextPage }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n// }\n\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async function () {\n    var _paginatedTransaction;\n\n    let append = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: append ? (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0 : 0\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        return response;\n      }\n\n      if (append && previousResponse !== null) {\n        return {\n          data: [...previousResponse.data, ...response.data],\n          nextPage: response.nextPage\n        };\n      }\n\n      return response;\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","append","response","page","nextPage","previousResponse","data","invalidateData"],"sources":["/Users/tarkantaboglu/Downloads/ramp-fe-challenge-2/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n\n//   const fetchAll = useCallback(async () => {\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null || previousResponse === null) {\n//         return response\n//       }\n\n//       return { data: response.data, nextPage: response.nextPage }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n// }\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null)\n\n  const fetchAll = useCallback(async (append = false) => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: append ? (paginatedTransactions?.nextPage ?? 0) : 0,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        return response\n      }\n\n      if (append && previousResponse !== null) {\n        return {\n          data: [...previousResponse.data, ...response.data],\n          nextPage: response.nextPage,\n        }\n      }\n\n      return response\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AACA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EAEA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,kBAA0B;IAAA;;IAAA,IAAnBS,MAAmB,uEAAV,KAAU;IACrD,MAAMC,QAAQ,GAAG,MAAMN,cAAc,CACnC,uBADmC,EAEnC;MACEO,IAAI,EAAEF,MAAM,4BAAIH,qBAAJ,aAAIA,qBAAJ,uBAAIA,qBAAqB,CAAEM,QAA3B,yEAAuC,CAAvC,GAA4C;IAD1D,CAFmC,CAArC;IAOAL,wBAAwB,CAAEM,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOA,QAAP;MACD;;MAED,IAAID,MAAM,IAAII,gBAAgB,KAAK,IAAnC,EAAyC;QACvC,OAAO;UACLC,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;UAELF,QAAQ,EAAEF,QAAQ,CAACE;QAFd,CAAP;MAID;;MAED,OAAOF,QAAP;IACD,CAbuB,CAAxB;EAcD,CAtB2B,EAsBzB,CAACN,cAAD,EAAiBE,qBAAjB,CAtByB,CAA5B;EAwBA,MAAMS,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEO,IAAI,EAAER,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDO;EAAlD,CAAP;AACD;;GAjCeZ,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}