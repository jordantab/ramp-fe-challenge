{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/tarkantaboglu/Downloads/ramp-fe-challenge-2/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n\n//   const fetchAll = useCallback(async () => {\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null || previousResponse === null) {\n//         return response\n//       }\n\n//       return { data: response.data, nextPage: response.nextPage }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n// }\n"],"mappings":""},"metadata":{},"sourceType":"module"}